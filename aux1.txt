 
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QModelIndex
from PyQt5.QtWidgets import *
import csvScraper as cs
import sys
import pdfScraper as pd
from PyQt5.uic import loadUi
import subprocess 
import os
 
 
 
 -----------------------------------------------------------------------------
 
        self.ExaminarButton.clicked.connect(self.examinar)
        self.pushButton.clicked.connect(self.examinar2)
        self.pushButton_2.clicked.connect(self.examinar3)
        self.generarReporte.clicked.connect(self.generarReporte_CSV)
        self.generarReporte_2.clicked.connect(self.generarReport_pdf)

        self.pushButton_7.clicked.connect(self.get_table_content)

-----------------------------------------------------------------------------

    def examinar(self):
        try:
            file_name = QFileDialog.getOpenFileName(filter='*.csv *.xls')
            self.lineEdit.setText(file_name[0])
        except Exception as ex:
            print(f"Unexpected {ex=}, {type(ex)=}")
    
    def examinar2(self):
        try:
            file_name = QFileDialog.getExistingDirectory()
            self.lineEdit_2.setText(file_name)
        except Exception as ex:
            print(f"Unexpected {ex=}, {type(ex)=}")
        
    def examinar3(self):
        model = QtGui.QStandardItemModel()
        files_names = QFileDialog.getOpenFileNames(filter='*.pdf')
        self.listView.setModel(model)
        for i in files_names[0]:
            item = QtGui.QStandardItem(i)
            model.appendRow(item)
            

    def generarReporte_CSV(self):
        app.setOverrideCursor(Qt.WaitCursor)
        try:
            path_destino = self.lineEdit_2.text() if self.lineEdit_2.text().strip() != '' else os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
            lista_errores = cs.generarReporte(self.lineEdit.text(), self.lineEdit_2.text())
            ui.label.setText('Reporte generado en: ' + path_destino) 
            msg_1 = QMessageBox()
            print(str(str(lista_errores)))
            if(len(lista_errores) != 0):
                msg_1.setIcon(QMessageBox.Information)
                msg_1.setText(str(lista_errores))
                msg_1.setWindowTitle("Error")
                msg_1.setStandardButtons(QMessageBox.Ok)
                msg_1.exec_()
                #Abre ventana para elegir columnas que quiero que participen en el reporte
                self.openSecondWindow()
                self.ui.set_data_table(lista_errores[1])
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText('Reporte generado en: ' + path_destino)
            msg.setWindowTitle("Information")
            msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            ui.label.setText('Reporte generado en: ' + path_destino)
            msg.exec_()
            subprocess.Popen([path_destino+'/Reporte2.pdf'],shell=True)
        except Exception as ex:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(f"Unexpected {ex=}, {type(ex)=}")
            msg.setWindowTitle('Error')
            msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            ui.label.setText('Error' + f"Unexpected {ex=}, {type(ex)=}")
            msg.exec_()
        
        app.restoreOverrideCursor()
    
    def generarReport_pdf(self):
        app.setOverrideCursor(Qt.WaitCursor)
        files = []
        try:
            model = self.listView.model()
            for i in range(model.rowCount()):
                index =  model.index(i, 0, QModelIndex())
                files.append(model.data(index))
            pd.crearReporte(files, self.lineEdit_2.text())
            
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText('Reporte generado en: ' + self.lineEdit_2.text())
            msg.setWindowTitle("Information")
            msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            ui.label.setText('Reporte generado en: ' + self.lineEdit_2.text())
            msg.exec_()
            subprocess.Popen([self.lineEdit_2.text()+'/Reporte.pdf'],shell=True)
        except Exception as ex:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText(f"Unexpected {ex=}, {type(ex)=}")
            msg.setWindowTitle("Error")
            msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            ui.label.setText('Error' + f"Unexpected {ex=}, {type(ex)=}")
            msg.exec_()
        app.restoreOverrideCursor()

    def get_table_content(self):
        for item in self.tableWidget.selectedItems():
            print(item.text())
        
    def set_data_table(self, list_column):
        cant_columns = len(list_column)
        lista_fix = []
        for i in range(0, cant_columns):
            if(not str(list_column[i]).__contains__('Unnamed:')):
                lista_fix.append(list_column[i])
        
        cant_columns = len(lista_fix)
        self.tableWidget.setColumnCount(cant_columns)
        self.tableWidget.setRowCount(1)
        #self.tableWidget.setHorizontalHeaderLabels(('test', 'test2'))
        #self.tableWidget.setColumnWidth(0, 120)
        j = 0
        for i in lista_fix:
            self.tableWidget.setItem(0, j, QtWidgets.QTableWidgetItem(str(i)))
            j += 1